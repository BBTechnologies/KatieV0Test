'use client';

import React, { useContext, useState } from 'react';

import availableThemes from '../../../autoGenerated/libraryThemes.json';
import { AppContext } from '../../../contextProviders/appContext/AppContextProvider';
import { UserContext } from '../../../contextProviders/userContext/UserContextProvider';

export const ThemeSwitch: React.FC<{ onThemeChange?: (newTheme: string) => void}> = (
  {
    onThemeChange = () => {}
  }
) => {
  const appContextProvider = useContext(AppContext);
  const userContextProvider = useContext(UserContext);

  const appTheme = appContextProvider?.appContext?.theme;
  const userTheme = userContextProvider?.userContext?.theme;

  const initialTheme = userTheme || appTheme || 'monochrome';

  const [activeTheme, setActiveTheme] = useState<string>(initialTheme);

  const handleThemeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const newTheme: string = event.target.value;
    setActiveTheme(newTheme);
    onThemeChange(newTheme);
  };

  return (
    <div className="columnLayout">
      <div className="formField horizontal select_Field">
        <label>
          <span className="labelText">Swap theme</span>
          <div className="inputContainer">
            <select defaultValue={ activeTheme } onChange={ handleThemeChange } id="themeSelector" name="themeSelector">
              {
                Object.keys(availableThemes).map((themeKey) => (
                  <option
                    key={ themeKey }
                    value={ themeKey }
                  >
                    { themeKey }
                  </option>
                ))
              }
            </select>
          </div>
        </label>
      </div>
    </div>
  );
};
