'use client';

import React, { useContext } from 'react';

// TODO: Work out how to handle this if the project has not been built so this file does not exist
import availableThemes from '../../../autoGenerated/libraryThemes.json';
import { AppContext } from '../../../contextProviders/appContext/AppContextProvider';

export type ThemeStructure = {
  buildPath: string;
  dev: {
    css: string;
    map: string;
  };
  min: {
    css: string;
    map: string;
  };
  versioned: {
    css: string;
    map: string;
  };
};

type AvailableThemes = {
  [themeName: string]: ThemeStructure;
};

type themeLoaderProps = {
  useMin?: boolean,
  forceProd?: boolean,
  userTheme?: string;
};

const themes: AvailableThemes = availableThemes;

export const ThemeLoader: React.FC<themeLoaderProps> = (
  {
    useMin = false,
    forceProd = false,
    userTheme
  }
) => {
  const appContextProvider = useContext(AppContext);
  const appTheme = appContextProvider?.appContext?.theme;

  const activeTheme = userTheme || appTheme || 'monochrome';
  const publicLibraryFolder = appContextProvider?.appContext?.publicLibraryFolder || '';

  const env = process.env.NODE_ENV;
  const {
    buildPath, dev, min, versioned
  } = themes[activeTheme];

  const cssFile = () => {
    if (forceProd) {
      return versioned.css;
    }

    if (env === 'production') {
      return useMin ? versioned.css : min.css;
    }

    if (env === 'development') {
      return useMin ? min.css : dev.css;
    }

    return dev.css;
  };

  const cssPath = `${ publicLibraryFolder || '' }/${ buildPath }/${ cssFile() }`;

  return (
    <link rel="stylesheet" id="x15-ui-library-theme" href={ cssPath } />
  );
};
