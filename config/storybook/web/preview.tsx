import React, { useEffect } from 'react';
import { Preview } from '@storybook/react';
import { addons } from '@storybook/manager-api';
import { withPerformance } from 'storybook-addon-performance';

import { UserContextProvider } from '../../../src/contextProviders/userContext/UserContextProvider';
import { UserMock } from '../../../src/mocks';
import { HookFormWrapper } from '../../../src/components/form/hookFormWrapper/HookFormWrapper';

import libraryThemes from '../../../src/autoGenerated/libraryThemes.json';

import '../../../src/styles/storybook/storybook.scss';
import '../../../src/styles/index.scss';

export const parameters = {
  actions: { argTypesRegex: '^on[A-Z].*' },
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/
    }
  }
};

const preview: Preview = {
  globalTypes: {
    theme: {
      description: 'Global theme for components',
      toolbar: {
        title: 'Theme',
        icon: 'circlehollow',
        items: Object.keys(libraryThemes),
        dynamicTitle: true
      }
    }
  },
  initialGlobals: {
    theme: 'monochrome'
  },
  tags: ['autodocs'],
  parameters: {
    controls: { expanded: true },
    options: {
      storySort: {
        method: 'alphabetical',
        order: [
          'Introduction',
          'Base',
          'Preview',
          'Components',
            [
              'Accordion',
                [
                  'Implementation details',
                  '*'
                ],
              '*'
            ],
          'Forms',
            [
              'Component Structure',
                ['*', 'HookFormWrapper'],
              '*'
            ],
          'Layout',
          'Navigation',
          'Experimental'
        ]
      }
    }
  },
  decorators: [
    withPerformance,
    (Story, context) => {
      const { theme } = context.globals;
      const userConfig = UserMock;
      userConfig.theme = theme;

      useEffect(() => {
        addons.getChannel().emit('expandAll');
      }, []);

      return (
        <UserContextProvider userConfig={ userConfig }>
          <Story />
        </UserContextProvider>
      );
    }
  ]
};

export default preview;
